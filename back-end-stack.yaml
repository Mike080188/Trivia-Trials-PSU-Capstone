AWSTemplateFormatVersion: 2010-09-09
Description: Trivia Trials Dynamo, API Gateway and Lambda functions

# Parameters:
#   apiGatewayName:
#     Type: String
#     Default: my-api
#   apiGatewayStageName:
#     Type: String
#     AllowedPattern: "[a-z0-9]+"
#     Default: call
#   apiGatewayHTTPMethod:
#     Type: String
#     Default: POST
#   lambdaFunctionName:
#     Type: String
#     AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
#     Default: my-function

Resources:
  DynamoDB:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "QuestionId"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "QuestionId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3
      TableName: Questions

  DynamodbRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument: 
          Version: 2012-10-17
          Statement:
            - 
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - 
            PolicyName: "dynamodbWriteAccess"
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - 
                  Effect: Allow
                  Action:
                    - dynamodb:PutItem
                    - dynamodb:GetItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:PutItem
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - !GetAtt DynamoDB.Arn

  StartGameFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: 
        ImageUri: public.ecr.aws/lambda/python:3.9
        S3Bucket: trivia-trials-config-bucket
        S3Key: start_game.zip
      FunctionName: StartGame
      Handler: start_game.handler
      Role: !GetAtt DynamodbRole.Arn
      # imageURI: public.ecr.aws/lambda/python:3.9
      MemorySize: 128
      Runtime: python3.9


  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Example API Gateway
      EndpointConfiguration:
        Types:
          - EDGE
      Name: TriviaTrialsApiGateway

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${StartGameFunction.Arn}/invocations
          # - lambdaArn: !GetAtt StartGameFunction.Arn
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: TriviaTrialsApiGateway

  # ConfigLambdaPermission:
  #   Type: "AWS::Lambda::Permission"
  #   DependsOn:
  #     - apiGateway
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: StartGame
  #     Principal: apigateway.amazonaws.com

  # lambdaFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Code:
  #       ZipFile: |
  #         def handler(event,context):
  #           return {
  #             'body': 'Hello there {0}'.format(event['requestContext']['identity']['sourceIp']),
  #             'headers': {
  #               'Content-Type': 'text/plain'
  #             },
  #             'statusCode': 200
  #           }
  #     Description: Example Lambda function
  #     FunctionName: StartGame
  #     Handler: index.handler
  #     MemorySize: 128
  #     Role: !GetAtt lambdaIAMRole.Arn
  #     Runtime: python3.8

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: StartGame
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/PATH_PART
      # SourceArn: !Sub arn:aws:execute-api:us-east-1:049850382269:${apiGateway}/TriviaTrialsApiGateway/POST/
      SourceArn: arn:aws:execute-api:us-east-1:049850382269:tnue03kxhg/*/POST/
      

  # lambdaIAMRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Action:
  #             - sts:AssumeRole
  #           Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #     Policies:
  #       - PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Action:
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #               Effect: Allow
  #               Resource:
  #                 - !Sub arn:aws:logs:${AWS::Region}:049850382269:log-group:/aws/lambda/${StartGame}:*
  #         PolicyName: lambda

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/StartGame
      RetentionInDays: 90

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.us-east-1.amazonaws.com/TriviaTrialsApiGateway

  lambdaArn:
    Value: !GetAtt StartGameFunction.Arn